Index: ContextGeneration/GenerateNameNetworks.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\nfrom Components import Account\r\nfrom Components.Account import random_account, create_accounts_by_bulk\r\n\r\nRando = random_account(\"Randos\")\r\n\r\n# Default names for different lists\r\ndefault_covert_list = create_accounts_by_bulk([\r\n    \"Michael\", \"James\", \"John\", \"Robert\", \"William\",\r\n    \"David\", \"Richard\", \"Joseph\", \"Christopher\", \"Daniel\"\r\n])\r\ndefault_overt_list = create_accounts_by_bulk([\r\n    \"Alice\", \"Sophia\", \"Emma\", \"Olivia\", \"Ava\",\r\n    \"Isabella\", \"Mia\", \"Amelia\", \"Harper\", \"Evelyn\",\r\n    \"Abigail\", \"Emily\", \"Elizabeth\", \"Mila\", \"Ella\",\r\n    \"Avery\", \"Sofia\", \"Camila\", \"Aria\", \"Scarlett\",\r\n    \"Victoria\", \"Madison\", \"Luna\", \"Grace\", \"Chloe\",\r\n    \"Penelope\", \"Layla\", \"Riley\", \"Zoey\", \"Nora\",\r\n    \"Lily\", \"Eleanor\", \"Hannah\", \"Lillian\", \"Addison\",\r\n    \"Aubrey\", \"Ellie\", \"Stella\", \"Natalie\", \"Zoe\",\r\n    \"Leah\"\r\n])\r\ndefault_pro_list = create_accounts_by_bulk([\r\n    \"Montgomery\", \"Juneau\", \"Phoenix\", \"Little Rock\", \"Sacramento\", \"Denver\",\r\n    \"Hartford\", \"Dover\", \"Tallahassee\", \"Atlanta\", \"Honolulu\", \"Boise\",\r\n    \"Springfield\", \"Indianapolis\", \"Des Moines\", \"Topeka\", \"Frankfort\", \"Baton Rouge\",\r\n    \"Augusta\", \"Annapolis\", \"Boston\", \"Lansing\", \"Saint Paul\", \"Jackson\",\r\n    \"Jefferson City\", \"Helena\", \"Lincoln\", \"Carson City\", \"Concord\", \"Trenton\",\r\n    \"Santa Fe\", \"Albany\", \"Raleigh\", \"Bismarck\", \"Columbus\", \"Oklahoma City\",\r\n    \"Salem\", \"Harrisburg\", \"Providence\", \"Columbia\", \"Pierre\", \"Nashville\",\r\n    \"Austin\", \"Salt Lake City\", \"Montpelier\", \"Richmond\", \"Olympia\", \"Charleston\",\r\n    \"Madison\", \"Cheyenne\"\r\n])\r\n\r\nideal_covert_size = 10\r\nideal_overt_size = 40\r\nideal_pro_size = 50\r\n\r\n\r\n# Function to generate random subset of entries from overt_list up to a given index\r\ndef random_subset(account_list, number: int) -> list[\"Account\"]:\r\n    if number > len(account_list):\r\n        number = len(account_list)\r\n\r\n    user_sublist = account_list[:number]\r\n    # The number of entries to return\r\n    friend_count = random.randint(1, number)\r\n\r\n    return random.sample(user_sublist, friend_count)\r\n\r\n\r\nclass NetworkManager:\r\n    def __init__(self):\r\n        self.covert_list = []\r\n        self.overt_list = []\r\n        self.pro_list = []\r\n\r\n    def set_list(self, list_name: str, passed_accounts: list[\"Account\"], ideal_size: int, default_list: list[\"Account\"]):\r\n        if len(passed_accounts) < ideal_size:\r\n            default_accounts = create_accounts_by_bulk(default_list[:(ideal_size - len(passed_accounts))])\r\n            setattr(self, list_name, passed_accounts + default_accounts)\r\n        else:\r\n            setattr(self, list_name, passed_accounts[:ideal_size])\r\n\r\n    def set_covert_list(self, passed_accounts: list[\"Account\"]) -> None:\r\n        \"\"\"Set the covert list of accounts.\"\"\"\r\n        self.set_list(\"covert_list\", passed_accounts, ideal_covert_size, default_covert_list)\r\n        self.generate_covert_network()\r\n\r\n    def set_overt_list(self, passed_accounts: list[\"Account\"]) -> None:\r\n        \"\"\"Set the overt list of accounts.\"\"\"\r\n        self.set_list(\"overt_list\", passed_accounts, ideal_overt_size, default_overt_list)\r\n        self.generate_overt_network()\r\n\r\n    def set_pro_list(self, passed_accounts: list[\"Account\"]) -> None:\r\n        \"\"\"Set the pro list of accounts.\"\"\"\r\n        self.set_list(\"pro_list\", passed_accounts, ideal_pro_size, default_pro_list)\r\n        self.generate_pro_network()\r\n\r\n    def generate_covert_network(self):\r\n        \"\"\"Generate connections in the covert network.\"\"\"\r\n        group_lead = self.covert_list[:2]\r\n        group_michael = self.covert_list[2:5]\r\n        group_william = self.covert_list[5:8]\r\n        group_unis = self.covert_list[8:10]\r\n\r\n        for lead in group_lead:\r\n            lead.subscriptions.append(Rando)\r\n\r\n        for friend in group_michael + group_unis:\r\n            friend.subscriptions.append(self.covert_list[0])\r\n\r\n        for friend in group_william + group_unis:\r\n            friend.subscriptions.append(self.covert_list[1])\r\n\r\n        return self.covert_list\r\n\r\n    def generate_overt_network(self):\r\n        \"\"\"Generate connections in the overt network.\"\"\"\r\n        # Assigning friends to overt accounts based on specific rules\r\n        for i in range(len(self.overt_list)):\r\n            if i < 2:\r\n                self.overt_list[i].subscriptions.append(Rando)\r\n            else:\r\n                self.overt_list[i].subscriptions.extend(random_subset(self.overt_list, i))\r\n                self.overt_list[0].subscriptions.extend(random_subset(self.overt_list, 10))\r\n                self.overt_list[1].subscriptions.extend(random_subset(self.overt_list, 10))\r\n\r\n        return self.overt_list\r\n\r\n    def generate_pro_network(self):\r\n        for account in self.pro_list:\r\n            number_friends = random.randint(1, len(self.pro_list) // 2)\r\n            possible_friends = [friend for friend in self.pro_list if friend != account]\r\n\r\n            friends = random.sample(possible_friends, number_friends)\r\n            account.subscriptions.extend(friends)\r\n\r\n        return self.pro_list\r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ContextGeneration/GenerateNameNetworks.py b/ContextGeneration/GenerateNameNetworks.py
--- a/ContextGeneration/GenerateNameNetworks.py	(revision 7bbedd09298162c51e280fa34f44ce48a04eb64d)
+++ b/ContextGeneration/GenerateNameNetworks.py	(date 1721329918720)
@@ -38,7 +38,7 @@
 
 
 # Function to generate random subset of entries from overt_list up to a given index
-def random_subset(account_list, number: int) -> list["Account"]:
+def random_from_subset(account_list, number: int) -> list["Account"]:
     if number > len(account_list):
         number = len(account_list)
 
@@ -102,9 +102,10 @@
             if i < 2:
                 self.overt_list[i].subscriptions.append(Rando)
             else:
-                self.overt_list[i].subscriptions.extend(random_subset(self.overt_list, i))
-                self.overt_list[0].subscriptions.extend(random_subset(self.overt_list, 10))
-                self.overt_list[1].subscriptions.extend(random_subset(self.overt_list, 10))
+                self.overt_list[i].subscriptions.extend(random_from_subset(self.overt_list, i))
+
+        self.overt_list[0].subscriptions.extend(random_from_subset(self.overt_list, 10))
+        self.overt_list[1].subscriptions.extend(random_from_subset(self.overt_list, 10))
 
         return self.overt_list
 
@@ -117,4 +118,3 @@
             account.subscriptions.extend(friends)
 
         return self.pro_list
-    
\ No newline at end of file
